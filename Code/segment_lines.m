function [intersections lines] = segment_lines(points)
%==========================================================================
%==========================================================================
%
%  File: segment_lines.m
%  Auth: Justin Cosentino
%  Date: 08 July 2013
%
%  In: points - The points representing the target generated by the lidar
%
%  Out: intersections - a 2x5 matrix representing the points at which a
%                       split will occur

%
%  Desc: Using a modified split-merge algorithm with max recusrive depth of
%        two, we segment the scan data into lines that represent the faces
%        of the target.
%
%  Usage: 
%           segment_lines(points)
%
%==========================================================================

% Error Checking
if ~(nargin == 1)
    help splitAndMerge
    return
end

% Make first split
num_points = size(points,2);
first = points(:,1);
last  = points(:,num_points);
index1 = splitIndex(first, last, points);
split1 = points(:,index1);

% Make second splits
index2 = splitIndex(first, split1, points(:, 1:index1));
split2 = points(:,index2);
index3 = splitIndex(split1, last, points(:,index1:num_points)) + index1 -1;
split3 = points(:,index3);

% Seperate point sets based on split indices
points_one_x = points(1,1:index2);
points_one_y = points(2,1:index2);
points_two_x = points(1,index2:index1);
points_two_y = points(2,index2:index1);
points_three_x = points(1,index1:index3);
points_three_y = points(2,index1:index3);
points_four_x = points(1,index3:end);
points_four_y = points(2,index3:end);


% Calculate lines (fitting lines to inverted data and inverting those lines
% to account for vertical lines on wings)
line_one   = robustfit(points_one_y, points_one_x);
line_one(1) = -1*line_one(1)/(line_one(2)); line_one(2) = 1/(line_one(2));
line_two   = robustfit(points_two_x, points_two_y);
line_three = robustfit(points_three_x, points_three_y);
line_four  = robustfit(points_four_y, points_four_x);
line_four(1) = -1*line_four(1)/(line_four(2)); line_four(2) = 1/(line_four(2));

% Calculate intersection points (used for calculating apex)
intersect_one = intersection(line_one,line_two);
intersect_two = intersection(line_two,line_three);
intersect_three = intersection(line_three,line_four);

% Combine intersection points and lines into arrays
intersections = [intersect_one intersect_two intersect_three];
lines = [line_one line_two line_three line_four];

%==========================================================================
%==========================================================================
function [index] = splitIndex(first,last, points)
%==========================================================================
% Func: splitIndex()
% Desc: Given a series of points and the first and last point of that
%       series, calculate the point that is farthest from the line
%       represented by the first and last point.
%==========================================================================

% Fit line to first and last point
v = last-first;
v_perp = [-v(2),v(1)];
line = v_perp/norm(v_perp);

n = size(points,2);

maxDistance = 0; index = 0;
for i=1:n
    currentPoint = points(:,i);
    distance = dot(line, currentPoint-first);
    if abs(distance) > maxDistance
        maxDistance = abs(distance);
        index = i;
    end
end
 
end % function splitIndex


%==========================================================================
%==========================================================================
function [intersect] = intersection(l1,l2)
%==========================================================================
% Func: intersection()
% Desc: Given two lines, find the points of intersection
%==========================================================================

% y=ax-c
% y=bx-d
a = l1(2);
c = l1(1);

b = l2(2);
d = l2(1);

intersect = [(d-c)/(a-b) ; a*((d-c)/(a-b)) + c];
    
end % function intersection

end % function segment_lines



%%% DATA PLOT FOR PRESENTATION - WILL REMOVE LATER %%%

% figure(3); hold on; grid off; axis square;
% title('Lidar Scan Data (Average)');
% plot(points(2,:), points(1,:), 'ko')
% plot([points(2,1), points(2,end)], [points(1,1), points(1,end)], 'r-', 'LineWidth', 2);
% hold off;

% figure(3); hold on; grid off; axis square;
% title('Lidar Scan Data (Average)');
% plot(points(2,:), points(1,:), 'ko')
% plot([points(2,1), points(2,end)], [points(1,1), points(1,end)], 'r-', 'LineWidth', 2);
% hold off;
% 
% figure(1); hold on; grid off; axis square;
% title('Lidar Scan Data (Average)');
% plot(points(2,:), points(1,:), 'ko')
% plot([points(2,1), points(2,end)], [points(1,1), points(1,end)], 'r-', 'LineWidth', 2);
% plot(split1(2,1), split1(1,1), 'r*')
% hold off;
% 
% figure(5); hold on; grid off; axis square;
% title('Lidar Scan Data (Average)');
% plot(points(2,1:index1), points(1,1:index1), 'ko')
% plot(points(2,index1:end), points(1,index1:end), 'bo')
% hold off;
% 
% figure(4); hold on; grid off; axis square;
% title('Lidar Scan Data (Average)');
% plot(points(2,1:index1), points(1,1:index1), 'ko')
% plot(points(2,index1:end), points(1,index1:end), 'bo')
% plot([points(2,1), split1(2,1)], [points(1,1), split1(1,1)], 'r-', 'LineWidth', 2);
% plot([split1(2,1), points(2,end)],[split1(1,1), points(1,end)], 'r-', 'LineWidth', 2)
% hold off;
% 
% figure(2); hold on; grid off; axis square;
% title('Lidar Scan Data (Average)');
% plot(points(2,1:index1), points(1,1:index1), 'ko')
% plot(points(2,index1:end), points(1,index1:end), 'bo')
% plot([points(2,1), split1(2,1)], [points(1,1), split1(1,1)], 'r-', 'LineWidth', 2);
% plot([split1(2,1), points(2,end)],[split1(1,1), points(1,end)], 'r-', 'LineWidth', 2)
% plot(split1(2,1), split1(1,1), 'r*')
% plot(split2(2,1), split2(1,1), 'r*')
% plot(split3(2,1), split3(1,1), 'r*')
% hold off;
% 
% figure(6); hold on; grid off; axis square;
% title('Lidar Scan Data (Average)');
% plot(points(2,1:index2), points(1,1:index2), 'ko')
% plot(points(2,index2:index1), points(1,index2:index1), 'mo')
% plot(points(2,index1:index3), points(1,index1:index3), 'bo')
% plot(points(2,index3:end), points(1,index3:end), 'go')
% hold off;
% 
% figure(7); hold on; grid off; axis square; ylim([30, 70]); xlim([-50,50])
% title('Lidar Scan Data (Average)');
% plot(points(2,1:index2), points(1,1:index2), 'ko')
% plot(points(2,index2:index1), points(1,index2:index1), 'mo')
% plot(points(2,index1:index3), points(1,index1:index3), 'bo')
% plot(points(2,index3:end), points(1,index3:end), 'go')
% p = [min(points_one_y)-10:max(points_one_y)+10];
% plot(p, (1/line_one(2))*p   - line_one(1)/line_one(2), 'r-', 'LineWidth', 2)
% p = [min(points_two_y)-10:max(points_two_y)+10];
% plot(p, (1/line_two(2))*p   - line_two(1)/line_two(2),'r-', 'LineWidth', 2)
% p = [min(points_three_y)-10:max(points_three_y)+10];
% plot(p, (1/line_three(2))*p - line_three(1)/line_three(2), 'r-', 'LineWidth', 2)
% p = [min(points_four_y)-10:max(points_four_y)+10];
% plot(p, (1/line_four(2))*p  - line_four(1)/line_four(2), 'r-', 'LineWidth', 2)
% hold off;
% 
% figure(8); hold on; grid off; axis square;
% title('Lidar Scan Data (Average)');
% plot(points(2,:), points(1,:), 'ko')
% plot(intersect_one(2,1), intersect_one(1,1), 'r*')
% plot(intersect_two(2,1), intersect_two(1,1), 'r*')
% plot(intersect_three(2,1), intersect_three(1,1), 'r*')
% hold off;

